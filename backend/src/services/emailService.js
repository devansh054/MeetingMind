const nodemailer = require('nodemailer');
const handlebars = require('handlebars');
const fs = require('fs').promises;
const path = require('path');

class EmailService {
  constructor() {
    this.transporter = null;
    this.isConfigured = false;
    this.templates = new Map();
  }

  /**
   * Initialize email service with SMTP configuration
   */
  initialize(config) {
    const { host, port, secure, user, pass, service } = config;

    if (!user || !pass) {
      console.warn('Email credentials not provided');
      return;
    }

    const transportConfig = service ? {
      service: service, // 'gmail', 'outlook', etc.
      auth: { user, pass }
    } : {
      host,
      port: port || 587,
      secure: secure || false,
      auth: { user, pass }
    };

    this.transporter = nodemailer.createTransporter(transportConfig);
    this.isConfigured = true;
    console.log('Email service initialized');
  }

  /**
   * Load email templates
   */
  async loadTemplates() {
    const templatesDir = path.join(__dirname, '../templates/email');
    
    try {
      // Create templates directory if it doesn't exist
      await fs.mkdir(templatesDir, { recursive: true });

      // Load existing templates
      const templateFiles = await fs.readdir(templatesDir).catch(() => []);
      
      for (const file of templateFiles) {
        if (file.endsWith('.hbs')) {
          const templateName = path.basename(file, '.hbs');
          const templateContent = await fs.readFile(path.join(templatesDir, file), 'utf8');
          this.templates.set(templateName, handlebars.compile(templateContent));
        }
      }

      // Create default templates if they don't exist
      await this.createDefaultTemplates(templatesDir);
    } catch (error) {
      console.error('Error loading email templates:', error);
    }
  }

  /**
   * Create default email templates
   */
  async createDefaultTemplates(templatesDir) {
    const defaultTemplates = {
      'meeting-summary': `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Meeting Summary</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: #4F46E5; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .section { margin-bottom: 30px; }
        .action-item { background: #F3F4F6; padding: 15px; margin: 10px 0; border-left: 4px solid #4F46E5; }
        .priority-high { border-left-color: #EF4444; }
        .priority-medium { border-left-color: #F59E0B; }
        .priority-low { border-left-color: #10B981; }
        .footer { background: #F9FAFB; padding: 20px; text-align: center; color: #6B7280; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìù Meeting Summary</h1>
        <h2>{{meetingTitle}}</h2>
    </div>
    
    <div class="content">
        <div class="section">
            <p><strong>Date:</strong> {{meetingDate}}</p>
            <p><strong>Duration:</strong> {{duration}}</p>
            <p><strong>Participants:</strong> {{participants}}</p>
        </div>

        <div class="section">
            <h3>üìã Summary</h3>
            <p>{{summary}}</p>
        </div>

        {{#if actionItems}}
        <div class="section">
            <h3>üéØ Action Items</h3>
            {{#each actionItems}}
            <div class="action-item priority-{{priority}}">
                <p><strong>{{text}}</strong></p>
                <p><em>Assigned to: {{assignee}} | Priority: {{priority}}</em></p>
            </div>
            {{/each}}
        </div>
        {{/if}}

        {{#if decisions}}
        <div class="section">
            <h3>‚úÖ Decisions Made</h3>
            <ul>
                {{#each decisions}}
                <li>{{text}}</li>
                {{/each}}
            </ul>
        </div>
        {{/if}}

        {{#if keyPoints}}
        <div class="section">
            <h3>üîë Key Points</h3>
            <ul>
                {{#each keyPoints}}
                <li>{{text}}</li>
                {{/each}}
            </ul>
        </div>
        {{/if}}
    </div>

    <div class="footer">
        <p>Generated by MeetingMind AI Assistant</p>
        <p>This email was sent automatically after your meeting ended.</p>
    </div>
</body>
</html>`,

      'action-items-reminder': `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Action Items Reminder</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: #F59E0B; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .action-item { background: #FEF3C7; padding: 15px; margin: 10px 0; border-left: 4px solid #F59E0B; }
        .priority-high { border-left-color: #EF4444; background: #FEE2E2; }
        .footer { background: #F9FAFB; padding: 20px; text-align: center; color: #6B7280; }
    </style>
</head>
<body>
    <div class="header">
        <h1>‚è∞ Action Items Reminder</h1>
        <h2>{{meetingTitle}}</h2>
    </div>
    
    <div class="content">
        <p>Hi {{recipientName}},</p>
        <p>This is a friendly reminder about your action items from the meeting "{{meetingTitle}}" held on {{meetingDate}}.</p>

        <h3>Your Action Items:</h3>
        {{#each actionItems}}
        <div class="action-item priority-{{priority}}">
            <p><strong>{{text}}</strong></p>
            <p><em>Priority: {{priority}} | Due: {{dueDate}}</em></p>
        </div>
        {{/each}}

        <p>Please update the team on your progress in the next meeting or via Slack.</p>
    </div>

    <div class="footer">
        <p>Generated by MeetingMind AI Assistant</p>
    </div>
</body>
</html>`
    };

    for (const [templateName, templateContent] of Object.entries(defaultTemplates)) {
      const templatePath = path.join(templatesDir, `${templateName}.hbs`);
      try {
        await fs.access(templatePath);
        // Template already exists, skip
      } catch {
        // Template doesn't exist, create it
        await fs.writeFile(templatePath, templateContent.trim());
        this.templates.set(templateName, handlebars.compile(templateContent.trim()));
      }
    }
  }

  /**
   * Send meeting summary email to participants
   */
  async sendMeetingSummary(recipients, meetingData) {
    if (!this.isConfigured) {
      throw new Error('Email service not configured');
    }

    const template = this.templates.get('meeting-summary');
    if (!template) {
      throw new Error('Meeting summary template not found');
    }

    const { title, summary, actionItems, decisions, keyPoints, participants, duration, date } = meetingData;

    const templateData = {
      meetingTitle: title,
      meetingDate: new Date(date).toLocaleDateString(),
      duration: this.formatDuration(duration),
      participants: participants.join(', '),
      summary,
      actionItems,
      decisions,
      keyPoints
    };

    const htmlContent = template(templateData);

    const mailOptions = {
      from: process.env.EMAIL_FROM || 'noreply@meetingmind.ai',
      to: recipients.join(', '),
      subject: `Meeting Summary: ${title}`,
      html: htmlContent,
      text: this.generatePlainTextSummary(templateData)
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      return result;
    } catch (error) {
      console.error('Error sending meeting summary email:', error);
      throw error;
    }
  }

  /**
   * Send personalized action items reminder
   */
  async sendActionItemsReminder(recipient, actionItems, meetingData) {
    if (!this.isConfigured) {
      throw new Error('Email service not configured');
    }

    const template = this.templates.get('action-items-reminder');
    if (!template) {
      throw new Error('Action items reminder template not found');
    }

    // Filter action items for this recipient
    const userActionItems = actionItems.filter(item => 
      item.assignee && item.assignee.toLowerCase().includes(recipient.name.toLowerCase())
    );

    if (userActionItems.length === 0) {
      return null; // No action items for this user
    }

    const templateData = {
      recipientName: recipient.name,
      meetingTitle: meetingData.title,
      meetingDate: new Date(meetingData.date).toLocaleDateString(),
      actionItems: userActionItems.map(item => ({
        ...item,
        dueDate: item.dueDate ? new Date(item.dueDate).toLocaleDateString() : 'Not specified'
      }))
    };

    const htmlContent = template(templateData);

    const mailOptions = {
      from: process.env.EMAIL_FROM || 'noreply@meetingmind.ai',
      to: recipient.email,
      subject: `Action Items Reminder: ${meetingData.title}`,
      html: htmlContent,
      text: this.generatePlainTextActionItems(templateData)
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      return result;
    } catch (error) {
      console.error('Error sending action items reminder:', error);
      throw error;
    }
  }

  /**
   * Send follow-up email with meeting notes
   */
  async sendFollowUpEmail(recipients, meetingData, additionalNotes = '') {
    if (!this.isConfigured) {
      throw new Error('Email service not configured');
    }

    const { title, summary, actionItems, nextSteps } = meetingData;

    const htmlContent = `
      <h2>Follow-up: ${title}</h2>
      <h3>Quick Recap</h3>
      <p>${summary}</p>
      
      ${actionItems && actionItems.length > 0 ? `
        <h3>Action Items Status</h3>
        <ul>
          ${actionItems.map(item => `
            <li>${item.text} - <strong>${item.assignee || 'Unassigned'}</strong> (${item.priority})</li>
          `).join('')}
        </ul>
      ` : ''}
      
      ${nextSteps ? `
        <h3>Next Steps</h3>
        <p>${nextSteps}</p>
      ` : ''}
      
      ${additionalNotes ? `
        <h3>Additional Notes</h3>
        <p>${additionalNotes}</p>
      ` : ''}
      
      <p><em>Generated by MeetingMind AI Assistant</em></p>
    `;

    const mailOptions = {
      from: process.env.EMAIL_FROM || 'noreply@meetingmind.ai',
      to: recipients.join(', '),
      subject: `Follow-up: ${title}`,
      html: htmlContent
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      return result;
    } catch (error) {
      console.error('Error sending follow-up email:', error);
      throw error;
    }
  }

  /**
   * Generate plain text version of meeting summary
   */
  generatePlainTextSummary(data) {
    let text = `MEETING SUMMARY: ${data.meetingTitle}\n\n`;
    text += `Date: ${data.meetingDate}\n`;
    text += `Duration: ${data.duration}\n`;
    text += `Participants: ${data.participants}\n\n`;
    text += `SUMMARY:\n${data.summary}\n\n`;

    if (data.actionItems && data.actionItems.length > 0) {
      text += `ACTION ITEMS:\n`;
      data.actionItems.forEach((item, index) => {
        text += `${index + 1}. ${item.text} (Assigned to: ${item.assignee}, Priority: ${item.priority})\n`;
      });
      text += '\n';
    }

    if (data.decisions && data.decisions.length > 0) {
      text += `DECISIONS MADE:\n`;
      data.decisions.forEach((decision, index) => {
        text += `${index + 1}. ${decision.text}\n`;
      });
      text += '\n';
    }

    if (data.keyPoints && data.keyPoints.length > 0) {
      text += `KEY POINTS:\n`;
      data.keyPoints.forEach((point, index) => {
        text += `${index + 1}. ${point.text}\n`;
      });
    }

    text += '\n---\nGenerated by MeetingMind AI Assistant';
    return text;
  }

  /**
   * Generate plain text version of action items reminder
   */
  generatePlainTextActionItems(data) {
    let text = `ACTION ITEMS REMINDER: ${data.meetingTitle}\n\n`;
    text += `Hi ${data.recipientName},\n\n`;
    text += `This is a reminder about your action items from the meeting "${data.meetingTitle}" held on ${data.meetingDate}.\n\n`;
    text += `YOUR ACTION ITEMS:\n`;
    
    data.actionItems.forEach((item, index) => {
      text += `${index + 1}. ${item.text} (Priority: ${item.priority}, Due: ${item.dueDate})\n`;
    });

    text += '\nPlease update the team on your progress in the next meeting or via Slack.\n\n';
    text += '---\nGenerated by MeetingMind AI Assistant';
    return text;
  }

  /**
   * Format duration in milliseconds to human readable format
   */
  formatDuration(durationMs) {
    const minutes = Math.floor(durationMs / (1000 * 60));
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;

    if (hours > 0) {
      return `${hours}h ${remainingMinutes}m`;
    }
    return `${minutes}m`;
  }

  /**
   * Test email connection
   */
  async testConnection() {
    if (!this.isConfigured) {
      throw new Error('Email service not configured');
    }

    try {
      await this.transporter.verify();
      return { success: true };
    } catch (error) {
      console.error('Email connection test failed:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Schedule email to be sent later
   */
  scheduleEmail(emailData, sendTime) {
    const delay = new Date(sendTime).getTime() - Date.now();
    
    if (delay <= 0) {
      throw new Error('Send time must be in the future');
    }

    return setTimeout(() => {
      this.sendEmail(emailData).catch(error => {
        console.error('Error sending scheduled email:', error);
      });
    }, delay);
  }
}

module.exports = new EmailService();
